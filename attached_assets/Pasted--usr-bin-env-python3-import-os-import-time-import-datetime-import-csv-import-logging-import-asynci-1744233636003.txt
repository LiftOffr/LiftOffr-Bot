#!/usr/bin/env python3
import os
import time
import datetime
import csv
import logging
import asyncio
import pandas as pd
import ta
import requests
import json
import numpy as np
from binance.client import Client  # For historical data and REST API
from binance import ThreadedWebsocketManager  # For Binance US WebSocket access

# -------------------------------
# 1. Custom Logger Setup (Console + File)
# -------------------------------
logger = logging.getLogger()  # Root logger
logger.setLevel(logging.INFO)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter(
    "%(asctime)s [%(levelname)s] %(message)s", datefmt="%Y-%m-%d %H:%M:%S"
)
console_handler.setFormatter(console_formatter)

file_handler = logging.FileHandler("sol_bot.log", mode="a")
file_handler.setLevel(logging.INFO)
file_formatter = logging.Formatter(
    "%(asctime)s [%(levelname)s] %(message)s", datefmt="%Y-%m-%d %H:%M:%S"
)
file_handler.setFormatter(file_formatter)

logger.addHandler(console_handler)
logger.addHandler(file_handler)

# -------------------------------
# 2. Global Configuration
# -------------------------------
INITIAL_CAPITAL = 20000.0       # Starting portfolio (USD)
portfolio_value = INITIAL_CAPITAL

LEVERAGE = 25                   # Leverage set to 25x
MARGIN_PERCENT = 0.25           # 25% of portfolio used as margin

# Trading pair settings for Binance US:
SYMBOL = 'SOLUSD'               # Symbol for both historical data and websockets

SLEEP_INTERVAL = 30             # Main loop interval (check live price every 30 seconds)
SIGNAL_INTERVAL = 5 * 60        # Signal update interval (5 minutes)
LOOKBACK_HOURS = 12             # Lookback period (hours) for historical data

API_KEY_FILE = 'binance.key'    # File containing your Binance US API key and secret
RETRY_DELAY = 60                # Delay (seconds) on error
DRY_RUN = False                 # Set to False for live trading

# Position variables
position = None                 # "long", "short", or None
entry_price = None
quantity = 0.0

total_profit = 0.0
total_profit_percent = 0.0
trade_count = 0

pending_order = None            # Pending order: {"type": "buy"/"sell", "price": float, "time": timestamp}
ORDER_TIMEOUT_SECONDS = 2 * SLEEP_INTERVAL

trailing_stop_order = None      # Pending trailing stop limit order
breakeven_order = None          # Pending breakeven exit limit order
liquidity_exit_order = None     # Pending liquidity exit limit order

trailing_max_price = None       # For long positions (highest price seen)
trailing_min_price = None       # For short positions (lowest price seen)

# Strategy Parameters (similar to Pine code)
ENTRY_ATR_MULTIPLIER = 0.3      # Entry offset multiplier for limit order placement
VOL_THRESHOLD = 0.006           # Normalized ATR threshold
BREAKEVEN_PROFIT_TARGET = 1.0   # Profit in ATR multiples to trigger breakeven exit

# ARIMA Lookback (for simple linear regression forecast)
ARIMA_LOOKBACK = 10

last_signal_update = 0
last_candle_time = None         # To track the last 15â€‘min candle processed
cached_df = None                # Cached DataFrame for indicator computation
cached_indicators = None        # Cached DataFrame with computed indicators

# Global variable for Binance live price (updated by the WebSocket)
binance_current_price = None

# Global variables for Binance API keys (populated in load_binance_api)
binance_api_key = None
binance_api_secret = None

# -------------------------------
# 3. Data Validation and Cleaning
# -------------------------------
def validate_data(df):
    df = df.fillna(method='ffill')
    df = df.dropna()
    return df

# -------------------------------
# 4. Trade Recording Function
# -------------------------------
def record_trade(order_type, quantity, price, profit, profit_percent, new_position):
    filename = "trades.csv"
    file_exists = os.path.isfile(filename)
    with open(filename, "a", newline="") as csvfile:
        fieldnames = [
            "timestamp", "order_type", "quantity", "price", "profit_usd",
            "profit_percent", "new_position", "portfolio_value", "total_profit", "total_profit_percent"
        ]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
        writer.writerow({
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "order_type": order_type.upper(),
            "quantity": quantity,
            "price": price,
            "profit_usd": round(profit, 2) if profit is not None else "",
            "profit_percent": round(profit_percent, 4) if profit_percent is not None else "",
            "new_position": new_position,
            "portfolio_value": round(portfolio_value, 2),
            "total_profit": round(total_profit, 2),
            "total_profit_percent": round(total_profit_percent, 4)
        })

# -------------------------------
# 5. Portfolio Summary Update Function
# -------------------------------
def update_summary():
    summary = (
        f"Timestamp: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"Position: {position}\n"
        f"Entry Price: {entry_price if entry_price is not None else 'N/A'}\n"
        f"Quantity: {quantity:.6f}\n"
        f"Portfolio Value: ${portfolio_value:.2f}\n"
        f"Total Profit: ${total_profit:.2f}\n"
        f"Total Profit Percent: {total_profit_percent:.2f}%\n"
        f"Trades Completed: {trade_count}\n"
        "-------------------------------\n"
    )
    with open("sol_portfolio_summary.txt", "w") as f:
        f.write(summary)
    logger.info(summary)

# -------------------------------
# 6. Binance US API Initialization and Historical Data Retrieval
# -------------------------------
def load_binance_api():
    global binance_api_key, binance_api_secret
    if not os.path.exists(API_KEY_FILE):
        logger.error(f"API key file '{API_KEY_FILE}' not found.")
        raise FileNotFoundError(f"{API_KEY_FILE} not found.")
    with open(API_KEY_FILE) as f:
        keys = f.read().strip().splitlines()
    if len(keys) < 2:
        raise ValueError("The API key file must have the API key on the first line and secret on the second.")
    binance_api_key, binance_api_secret = keys[0], keys[1]
    client = Client(binance_api_key, binance_api_secret, tld='us')
    return client

def get_15min_data(client, symbol=SYMBOL, lookback_hours=LOOKBACK_HOURS):
    # Binance kline interval for 15-minute candles: "15m"
    klines = client.get_historical_klines(symbol, "15m", f"{lookback_hours} hours ago UTC")
    if not klines:
        logger.error("No historical klines received from Binance.")
        return None
    df = pd.DataFrame(klines, columns=[
        "open_time", "open", "high", "low", "close", "volume",
        "close_time", "quote_asset_volume", "number_of_trades",
        "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
    ])
    for col in ["open", "high", "low", "close", "volume"]:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df["open_time"] = pd.to_datetime(df["open_time"], unit='ms')
    df.set_index("open_time", inplace=True)
    df = validate_data(df)
    return df

# -------------------------------
# 7. Binance US WebSocket Listener for Real-Time Price
# -------------------------------
def handle_binance_message(msg):
    global binance_current_price
    # msg is a dictionary with a "data" key containing ticker info.
    try:
        data = msg.get("data", {})
        if "c" in data:  # "c" is the last price in Binance's ticker stream
            binance_current_price = float(data["c"])
            logger.info(f"Binance WS Price updated: {binance_current_price:.4f}")
    except Exception as e:
        logger.error(f"Error processing Binance WS message: {e}")

def start_binance_ws():
    # Start Binance US WebSocket using ThreadedWebsocketManager.
    twm = ThreadedWebsocketManager(api_key=binance_api_key, api_secret=binance_api_secret, tld='us')
    twm.start()
    twm.start_symbol_ticker_socket(callback=handle_binance_message, symbol=SYMBOL)
    return twm

# -------------------------------
# 8. Indicator Computation
# -------------------------------
def compute_indicators(df):
    if len(df) < 30:
        raise ValueError("Not enough data to compute indicators. Need at least 30 data points.")
    df["close"] = df["close"].ffill().bfill()
    df["EMA9"] = ta.trend.ema_indicator(df["close"], window=9)
    df["EMA21"] = ta.trend.ema_indicator(df["close"], window=21)
    df["RSI14"] = ta.momentum.rsi(df["close"], window=14)
    
    macd = ta.trend.MACD(df["close"], window_fast=12, window_slow=26, window_sign=9)
    df["MACD"] = macd.macd()
    df["MACD_signal"] = macd.macd_signal()
    
    df["ADX"] = ta.trend.adx(df["high"], df["low"], df["close"], window=14)
    df["ATR14"] = ta.volatility.average_true_range(df["high"], df["low"], df["close"], window=14)
    
    bb = ta.volatility.BollingerBands(close=df["close"], window=20, window_dev=2)
    df["bb_upper"] = bb.bollinger_hband()
    df["bb_lower"] = bb.bollinger_lband()
    df["bb_middle"] = bb.bollinger_mavg()
    
    df["kc_middle"] = ta.trend.ema_indicator(df["close"], window=20)
    df["kc_upper"] = df["kc_middle"] + (2 * df["ATR14"])
    df["kc_lower"] = df["kc_middle"] - (2 * df["ATR14"])
    
    df.dropna(inplace=True)
    return df

def merge_indicators(df_15, df_30):
    df = df_15.join(df_30[["EMA9", "EMA21", "RSI14", "MACD", "MACD_signal", "ADX", "ATR14",
                             "bb_upper", "bb_lower", "bb_middle", "kc_middle", "kc_upper", "kc_lower"]],
                     how="left")
    return df.ffill()

# -------------------------------
# 9. ARIMA Forecast & Signal Generation
# -------------------------------
def compute_arima_forecast(series, lookback):
    if len(series) < lookback:
        return series.iloc[-1]
    data = series.iloc[-lookback:]
    x = np.arange(len(data))
    coeffs = np.polyfit(x, data, 1)
    slope, intercept = coeffs[0], coeffs[1]
    # Forecast one period ahead (similar to Pine's ta.linreg with offset=1)
    forecast = slope * len(data) + intercept
    return forecast

def compute_signals(df):
    last = df.iloc[-1]
    normalized_atr = last["ATR14"] / last["close"] if last["close"] != 0 else 0
    adaptive_filter = normalized_atr > VOL_THRESHOLD

    bullish = (last["EMA9"] > last["EMA21"]) and (45 < last["RSI14"] < 75) and \
              (last["MACD"] > last["MACD_signal"]) and (last["ADX"] > 20) and \
              adaptive_filter and (last["close"] < last["bb_upper"]) and (last["close"] > last["kc_middle"])
    bearish = (last["EMA9"] < last["EMA21"]) and (25 < last["RSI14"] < 55) and \
              (last["MACD"] < last["MACD_signal"]) and (last["ADX"] > 20) and \
              adaptive_filter and (last["close"] > last["bb_lower"]) and (last["close"] < last["kc_middle"])
    arima_forecast = compute_arima_forecast(df["close"], ARIMA_LOOKBACK)
    agg_signal = (1.0 if bullish else (-1.0 if bearish else 0.0))
    agg_signal += 0.5 if (arima_forecast > last["close"]) else (-0.5 if arima_forecast < last["close"] else 0.0)
    final_bullish = agg_signal >= 1.0
    final_bearish = agg_signal <= -1.0
    return final_bullish, final_bearish, last["close"], last["ATR14"]

# -------------------------------
# 10. Order Management & Execution Logic
# -------------------------------
def place_order(order_type, fill_price, atr_value, exit_only=False):
    global position, entry_price, quantity
    global portfolio_value, total_profit, total_profit_percent, trade_count
    global trailing_max_price, trailing_min_price, liquidity_exit_order

    margin_amount = portfolio_value * MARGIN_PERCENT
    notional = margin_amount * LEVERAGE

    if order_type.lower() == "buy":
        if exit_only:
            if position == "short":
                trade_profit = (entry_price - fill_price) * quantity
                portfolio_value += trade_profit
                total_profit = portfolio_value - INITIAL_CAPITAL
                total_profit_percent = (total_profit / INITIAL_CAPITAL) * 100.0
                trade_count += 1
                logger.info(f"Exiting SHORT with BUY at {fill_price:.4f}, Profit=${trade_profit:.2f}")
                record_trade("buy", quantity, fill_price, profit=trade_profit,
                             profit_percent=(trade_profit/margin_amount)*100.0, new_position="none")
                position = None
                entry_price = None
                quantity = 0.0
                trailing_min_price = None
                liquidity_exit_order = None
            else:
                logger.info("No SHORT position to close with BUY exit_only")
        else:
            if position is None:
                entry_price = fill_price
                quantity = notional / entry_price
                position = "long"
                trailing_max_price = fill_price
                trailing_min_price = None
                logger.info(f"Executed BUY at {fill_price:.4f}, qty={quantity:.6f}")
                record_trade("buy", quantity, fill_price, profit=None, profit_percent=None, new_position=position)
            elif position == "short":
                trade_profit = (entry_price - fill_price) * quantity
                portfolio_value += trade_profit
                total_profit = portfolio_value - INITIAL_CAPITAL
                total_profit_percent = (total_profit / INITIAL_CAPITAL) * 100.0
                trade_count += 1
                logger.info(f"Closing SHORT at {fill_price:.4f}, Profit=${trade_profit:.2f}")
                record_trade("buy", quantity, fill_price, profit=trade_profit,
                             profit_percent=(trade_profit/margin_amount)*100.0, new_position="long")
                entry_price = fill_price
                quantity = notional / entry_price
                position = "long"
                trailing_max_price = fill_price
                trailing_min_price = None
                logger.info(f"Opening LONG at {fill_price:.4f}")
                record_trade("buy", quantity, fill_price, profit=None, profit_percent=None, new_position=position)
            else:
                logger.info("Already in LONG; skipping BUY.")
    elif order_type.lower() == "sell":
        if exit_only:
            if position == "long":
                trade_profit = (fill_price - entry_price) * quantity
                portfolio_value += trade_profit
                total_profit = portfolio_value - INITIAL_CAPITAL
                total_profit_percent = (total_profit / INITIAL_CAPITAL) * 100.0
                trade_count += 1
                logger.info(f"Exiting LONG with SELL at {fill_price:.4f}, Profit=${trade_profit:.2f}")
                record_trade("sell", quantity, fill_price, profit=trade_profit,
                             profit_percent=(trade_profit/margin_amount)*100.0, new_position="none")
                position = None
                entry_price = None
                quantity = 0.0
                trailing_max_price = None
                liquidity_exit_order = None
            else:
                logger.info("No LONG position to close with SELL exit_only")
        else:
            if position is None:
                entry_price = fill_price
                quantity = notional / entry_price
                position = "short"
                trailing_min_price = fill_price
                trailing_max_price = None
                logger.info(f"Executed SELL at {fill_price:.4f}, qty={quantity:.6f}")
                record_trade("sell", quantity, fill_price, profit=None, profit_percent=None, new_position=position)
            elif position == "long":
                trade_profit = (fill_price - entry_price) * quantity
                portfolio_value += trade_profit
                total_profit = portfolio_value - INITIAL_CAPITAL
                total_profit_percent = (total_profit / INITIAL_CAPITAL) * 100.0
                trade_count += 1
                logger.info(f"Closing LONG at {fill_price:.4f}, Profit=${trade_profit:.2f}")
                record_trade("sell", quantity, fill_price, profit=trade_profit,
                             profit_percent=(trade_profit/margin_amount)*100.0, new_position="short")
                entry_price = fill_price
                quantity = notional / entry_price
                position = "short"
                trailing_min_price = fill_price
                trailing_max_price = None
                logger.info(f"Opening SHORT at {fill_price:.4f}")
                record_trade("sell", quantity, fill_price, profit=None, profit_percent=None, new_position=position)
            else:
                logger.info("Already in SHORT; skipping SELL.")
    update_summary()

# -------------------------------
# 11. Asynchronous Main Loop with Binance US WS and Live Trading Logic
# -------------------------------
async def main_loop():
    global pending_order, breakeven_order, trailing_stop_order, liquidity_exit_order
    global trailing_max_price, trailing_min_price, last_signal_update, last_candle_time, cached_df, cached_indicators
    global position, entry_price, quantity

    logger.info("Starting SOL Trading Bot on Live Trading Mode (Binance US)")
    try:
        client = load_binance_api()  # Load Binance US API client for historical data
    except Exception as e:
        logger.critical("API initialization failed. Exiting.")
        return

    last_signal_update = 0
    last_candle_time = None
    cached_df = None
    cached_indicators = None

    while True:
        try:
            # Use Binance US WebSocket price updated via ThreadedWebsocketManager
            current_price = binance_current_price
            if current_price is None:
                logger.error("Failed to retrieve current price from Binance WS. Skipping iteration.")
                await asyncio.sleep(SLEEP_INTERVAL)
                continue
            logger.info(f"Current Price: {current_price:.4f}")
            
            # Update signals at set interval (every SIGNAL_INTERVAL seconds)
            if time.time() - last_signal_update >= SIGNAL_INTERVAL or last_signal_update == 0:
                df_15 = get_15min_data(client, SYMBOL, LOOKBACK_HOURS)
                if df_15 is None or df_15.empty:
                    logger.error("No historical data received from Binance. Retrying...")
                    await asyncio.sleep(SLEEP_INTERVAL)
                    continue
                current_last_candle = df_15.index[-1]
                if last_candle_time is None or current_last_candle > last_candle_time:
                    last_candle_time = current_last_candle
                    cached_indicators = compute_indicators(df_15)
                    cached_df = df_15
                    logger.info("Indicators updated with new candle data.")
                else:
                    logger.info("No new candle; using cached indicators.")
                bullish, bearish, signal_price, atr_value = compute_signals(cached_indicators)
                last_signal_update = time.time()
                logger.info(f"Signal updated: signal_price={signal_price:.4f}, Bullish={bullish}, Bearish={bearish}, ATR={atr_value:.4f}")
            
            # Manage pending orders: cancel if signal conditions change
            if pending_order is not None:
                if pending_order["type"] == "buy" and not bullish:
                    logger.info("BUY signal stale; cancelling pending BUY order.")
                    pending_order = None
                elif pending_order["type"] == "sell" and not bearish:
                    logger.info("SELL signal stale; cancelling pending SELL order.")
                    pending_order = None
            
            # Check if pending order is filled based on live price
            if pending_order is not None:
                if pending_order["type"] == "buy" and current_price <= pending_order["price"]:
                    logger.info(f"Buy limit order filled at {pending_order['price']:.4f}")
                    place_order("buy", pending_order["price"], atr_value)
                    pending_order = None
                elif pending_order["type"] == "sell" and current_price >= pending_order["price"]:
                    logger.info(f"Sell limit order filled at {pending_order['price']:.4f}")
                    place_order("sell", pending_order["price"], atr_value)
                    pending_order = None
            
            # If no pending order and no active position, try to enter a new trade
            if pending_order is None and position is None:
                if bullish:
                    if (signal_price - current_price) > atr_value:
                        adjusted_signal_price = (signal_price + current_price) / 2
                    else:
                        adjusted_signal_price = signal_price
                    long_limit_price = adjusted_signal_price - (atr_value * ENTRY_ATR_MULTIPLIER)
                    if (long_limit_price - current_price) > atr_value:
                        long_limit_price = (long_limit_price + current_price) / 2
                    pending_order = {"type": "buy", "price": long_limit_price, "time": time.time()}
                    logger.info(f"Placing BUY limit order at {long_limit_price:.4f}")
                elif bearish:
                    if (current_price - signal_price) > atr_value:
                        adjusted_signal_price = (signal_price + current_price) / 2
                    else:
                        adjusted_signal_price = signal_price
                    short_limit_price = adjusted_signal_price + (atr_value * ENTRY_ATR_MULTIPLIER)
                    if (current_price - short_limit_price) > atr_value:
                        short_limit_price = (short_limit_price + current_price) / 2
                    pending_order = {"type": "sell", "price": short_limit_price, "time": time.time()}
                    logger.info(f"Placing SELL limit order at {short_limit_price:.4f}")
            
            # Trailing stop management for active positions (persistent trailing stop at 2.0Ã—ATR)
            if position == "long":
                trailing_max_price = current_price if trailing_max_price is None else max(trailing_max_price, current_price)
                new_trailing_stop = trailing_max_price - (2.0 * atr_value)
                if trailing_stop_order is None:
                    trailing_stop_order = {"side": "sell", "price": new_trailing_stop, "time": time.time()}
                    logger.info(f"Placing trailing stop limit SELL order at {new_trailing_stop:.2f}")
                else:
                    if new_trailing_stop > trailing_stop_order["price"]:
                        trailing_stop_order = {"side": "sell", "price": new_trailing_stop, "time": time.time()}
                        logger.info(f"Updating trailing stop limit SELL order to {new_trailing_stop:.2f}")
                    else:
                        logger.info(f"Keeping trailing stop limit SELL order at {trailing_stop_order['price']:.2f}")
                if current_price <= trailing_stop_order["price"]:
                    logger.info(f"Trailing stop limit SELL order triggered at {trailing_stop_order['price']:.2f}")
                    place_order("sell", current_price, atr_value, exit_only=True)
                    trailing_stop_order = None
                    trailing_max_price = None
                    breakeven_order = None
                    liquidity_exit_order = None
            
            elif position == "short":
                trailing_min_price = current_price if trailing_min_price is None else min(trailing_min_price, current_price)
                new_trailing_stop = trailing_min_price + (2.0 * atr_value)
                if trailing_stop_order is None:
                    trailing_stop_order = {"side": "buy", "price": new_trailing_stop, "time": time.time()}
                    logger.info(f"Placing trailing stop limit BUY order at {new_trailing_stop:.2f}")
                else:
                    if new_trailing_stop < trailing_stop_order["price"]:
                        trailing_stop_order = {"side": "buy", "price": new_trailing_stop, "time": time.time()}
                        logger.info(f"Updating trailing stop limit BUY order to {new_trailing_stop:.2f}")
                    else:
                        logger.info(f"Keeping trailing stop limit BUY order at {trailing_stop_order['price']:.2f}")
                if current_price >= trailing_stop_order["price"]:
                    logger.info(f"Trailing stop limit BUY order triggered at {trailing_stop_order['price']:.2f}")
                    place_order("buy", current_price, atr_value, exit_only=True)
                    trailing_stop_order = None
                    trailing_min_price = None
                    breakeven_order = None
                    liquidity_exit_order = None

            logger.info(f"Virtual Portfolio: ${portfolio_value:.2f} | Total Profit: ${total_profit:.2f} ({total_profit_percent:.2f}%)")
            update_summary()
            
            logger.info("Waiting until next interval...")
            await asyncio.sleep(SLEEP_INTERVAL)
        except Exception as e:
            logger.error(f"Error in main loop: {e}")
            logger.info(f"Retrying in {RETRY_DELAY} seconds...")
            await asyncio.sleep(RETRY_DELAY)

# -------------------------------
# Main entry point: Start Binance US WS and Trading Loop
# -------------------------------
async def main():
    client = load_binance_api()  # Initialize Binance US API client
    ws_manager = start_binance_ws()  # Start Binance US WebSocket (runs in separate thread)
    try:
        await main_loop()
    finally:
        ws_manager.stop()

if __name__ == "__main__":
    asyncio.run(main())

